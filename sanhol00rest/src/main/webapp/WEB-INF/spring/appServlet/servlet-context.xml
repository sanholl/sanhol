<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	servlet-context.xml은 DispatcherServlet의 작업을 위한 설정이다!
 -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 
		View 페이지 탐지 도구 등록 (View Resolver)
		- 접두사(prefix)와 접미사(suffix)를 설정하여 효율적인 경로 설정이 가능하도록 처리 
		- org.springframework.web.servlet.view.InternalResourceView
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 
		자동 스캔 설정
		- 내가 정한 패키지를 기준으로 하여 등록 가능한 요소들을 탐지하여 등록하도록 설정
		- 탐지하는 패키지는 top-level package로 설정하는 것이 일반적이다
		- 스프링에서는 경로 관련된 처리는 spring-context 모듈이 수행
		
		- mvc:annotation-driven 설정을 하면 특정 annotation들이 활성화됨
	 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- 복사한 뒤 반드시 고쳐야 하는 부분 -->
	<context:component-scan base-package="com.siso.sanhol00" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 복사한 뒤 반드시 고쳐야 하는 부분 -->
	
	<!-- 
		정적 자원(static resource) 위치 지정
		- DispatcherServlet을 거치면 안되는 요소들에 대한 설정을 수행
		- css, js, 이미지, font, ...
		- 프로그래밍 처리가 필요하지 않은 요소들
		- mvc 모듈 설정으로 처리
		- 일반적으로 webapp 안의 resources 에 모든 요소를 저장
	 -->
	<mvc:resources location="/resources/css/" mapping="/css/**"></mvc:resources>
	<mvc:resources location="/resources/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/resources/font/" mapping="/font/**"></mvc:resources>
	<mvc:resources location="/resources/image/" mapping="/image/**"></mvc:resources>
	
	<!-- 
		파일 업로드를 위한 도구 등록
		- (주의) 등록할 때 ID는 반드시 "multipartResolver"로 해야 한다.
	-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="${project.fileupload.max-total-size}"></property>
		<property name="maxUploadSizePerFile" value="${project.fileupload.max-file-size}"></property>
	</bean>
		
	<!-- 
		모든 Properties 파일의 정보를 불러오도록 설정 
		불러온 내용들은 ${key} 형태로 사용이 가능 
	-->
	<context:property-placeholder location="classpath:/properties/**/*.properties"/>
	
		<!-- 
		swagger 분석 설정 추가
		1. swagger에서 제공하는 기본 설정을 사용
		2. 직접 만든 커스텀 설정을 사용
		설정이 잘 되었다면 /v2/api-docs 주소가 활성화
	 -->
	<!-- <bean id="swagger2Config" class="springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration"></bean> --> 
	<bean id="swagger2Config" class="com.siso.sanhol00.configuration.SwaggerCustomConfiguration"></bean>
	
	<!-- 
		Swagger에서 제공하는 화면에 대한 정적 자원 위치 지정
		- Spring-Boot에서는 할 필요가 없음
		- swagger-ui.html은 자동 생성될 문서의 주소(2.x와 3.x가 주소가 다름)
		- webjars는 swagger-ui.html에서 사용하는 내부 자원에 대한 위치
			- webjar 자체는 Maven에서 프론트엔드 자원을 관리하기 위해 만들어진 시스템 체계
	 -->
	<mvc:resources location="classpath:/META-INF/resources/" mapping="swagger-ui.html"></mvc:resources>
	<mvc:resources location="classpath:/META-INF/resources/webjars/" mapping="/webjars/**"></mvc:resources>
		
	<!--  
		웹소켓 설정 
		- websocket namespace가 설정되어 있어야 한다.
		- 서버를 bean으로 등록하고 특정 경로에 웹소켓 할당을 수행한다.
		- (주의) http와 다른 ws라는 프로토콜을 사용하지만 주소가 겹치면 안된다.
		- (주의) 다른 origin에서의 연결은 불가능하다.(vscode에서 만들고 spring으로 연결하려면 안된다)
	-->
<!-- 	<bean id="defaultWebsocketServer" class="com.kh.spring19.ws.DefaultWebsocketServer"></bean>
	<bean id="timingWebsocketServer" class="com.kh.spring19.ws.TimingWebsocketServer"></bean>
	<bean id="simpleWebsocketServer" class="com.kh.spring19.ws.SimpleWebsocketServer"></bean> 
	<bean id="multiuserWebsocketServer" class="com.kh.spring19.ws.MultiuserWebsocketServer"></bean>
	<bean id="chatbotWebsocketServer" class="com.kh.spring19.ws.ChatbotWebsocketServer"></bean>
	
	<websocket:handlers>
		
			ws://localhost:8080/spring19/ws/default로 접속하면 
			defaultWebsocketServer가 연결을 수신하도록 합시다 라는 뜻이다 
		
		<websocket:mapping handler="defaultWebsocketServer" path="/ws/default"/>
		<websocket:mapping handler="timingWebsocketServer" path="/ws/timing"/>
		<websocket:mapping handler="simpleWebsocketServer" path="/ws/simple"/>
		<websocket:mapping handler="multiuserWebsocketServer" path="/ws/multiuser"/>
		<websocket:mapping handler="chatbotWebsocketServer" path="/ws/chatbot"/>
		
	</websocket:handlers>	
	
		
			sockjs를 적용하면 
			(1) ws를 http로 사용할 수 있고 
			(2) 구버전 브라우저도 처리해준다.
			- 하단에 작성하며, 작성 시 모든 웹소켓 연결이 변경되니 주의해야 한다. 
			
			handshake-interceptors를 등록하면 Http가 종료되면서 WebSocket으로 넘길 정보들을 설정할 수 있다.
			- HttpSession의 회원정보를 WebSocketSession으로 넘길 수 있다.
		
	<bean id="memberOnlyWebsocketServer" class="com.kh.spring19.ws.MemberOnlyWebsocketServer"></bean>
	<bean id="channelWebsocketServer" class="com.kh.spring19.ws.ChannelWebsocketServer"></bean>
		
	<websocket:handlers>
	
		<websocket:mapping handler="memberOnlyWebsocketServer" path="/ws/memberonly"/>
		<websocket:mapping handler="channelWebsocketServer" path="/ws/channel"/>
		<websocket:handshake-interceptors>
			<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"></bean>
		</websocket:handshake-interceptors>
		<websocket:sockjs></websocket:sockjs>
		
	</websocket:handlers> -->
	
</beans>